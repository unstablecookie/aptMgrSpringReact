{"ast":null,"code":"import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nconst elementDragControls = new WeakMap();\n/**\r\n *\r\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n  constructor(visualElement) {\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * The permitted boundaries of travel, in pixels.\r\n     */\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\r\n     * The per-axis resolved elastic values.\r\n     */\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n  start(originEvent) {\n    let {\n      snapToCursor = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /**\r\n     * Don't start dragging if this component is exiting\r\n     */\n    const {\n      presenceContext\n    } = this.visualElement;\n    if (presenceContext && presenceContext.isPresent === false) return;\n    const onSessionStart = event => {\n      const {\n        dragSnapToOrigin\n      } = this.getProps();\n      // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n      if (snapToCursor) {\n        this.snapToCursor(extractEventInfo(event, \"page\").point);\n      }\n    };\n    const onStart = (event, info) => {\n      var _a;\n      // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n      const {\n        drag,\n        dragPropagation,\n        onDragStart\n      } = this.getProps();\n      if (drag && !dragPropagation) {\n        if (this.openGlobalLock) this.openGlobalLock();\n        this.openGlobalLock = getGlobalLock(drag);\n        // If we don 't have the lock, don't start dragging\n        if (!this.openGlobalLock) return;\n      }\n      this.isDragging = true;\n      this.currentDirection = null;\n      this.resolveConstraints();\n      if (this.visualElement.projection) {\n        this.visualElement.projection.isAnimationBlocked = true;\n        this.visualElement.projection.target = undefined;\n      }\n      /**\r\n       * Record gesture origin\r\n       */\n      eachAxis(axis => {\n        let current = this.getAxisMotionValue(axis).get() || 0;\n        /**\r\n         * If the MotionValue is a percentage value convert to px\r\n         */\n        if (percent.test(current)) {\n          const {\n            projection\n          } = this.visualElement;\n          if (projection && projection.layout) {\n            const measuredAxis = projection.layout.layoutBox[axis];\n            if (measuredAxis) {\n              const length = calcLength(measuredAxis);\n              current = length * (parseFloat(current) / 100);\n            }\n          }\n        }\n        this.originPoint[axis] = current;\n      });\n      // Fire onDragStart event\n      if (onDragStart) {\n        frame.postRender(() => onDragStart(event, info));\n      }\n      (_a = this.removeWillChange) === null || _a === void 0 ? void 0 : _a.call(this);\n      this.removeWillChange = addValueToWillChange(this.visualElement, \"transform\");\n      const {\n        animationState\n      } = this.visualElement;\n      animationState && animationState.setActive(\"whileDrag\", true);\n    };\n    const onMove = (event, info) => {\n      // latestPointerEvent = event\n      const {\n        dragPropagation,\n        dragDirectionLock,\n        onDirectionLock,\n        onDrag\n      } = this.getProps();\n      // If we didn't successfully receive the gesture lock, early return.\n      if (!dragPropagation && !this.openGlobalLock) return;\n      const {\n        offset\n      } = info;\n      // Attempt to detect drag direction if directionLock is true\n      if (dragDirectionLock && this.currentDirection === null) {\n        this.currentDirection = getCurrentDirection(offset);\n        // If we've successfully set a direction, notify listener\n        if (this.currentDirection !== null) {\n          onDirectionLock && onDirectionLock(this.currentDirection);\n        }\n        return;\n      }\n      // Update each point with the latest position\n      this.updateAxis(\"x\", info.point, offset);\n      this.updateAxis(\"y\", info.point, offset);\n      /**\r\n       * Ideally we would leave the renderer to fire naturally at the end of\r\n       * this frame but if the element is about to change layout as the result\r\n       * of a re-render we want to ensure the browser can read the latest\r\n       * bounding box to ensure the pointer and element don't fall out of sync.\r\n       */\n      this.visualElement.render();\n      /**\r\n       * This must fire after the render call as it might trigger a state\r\n       * change which itself might trigger a layout update.\r\n       */\n      onDrag && onDrag(event, info);\n    };\n    const onSessionEnd = (event, info) => this.stop(event, info);\n    const resumeAnimation = () => eachAxis(axis => {\n      var _a;\n      return this.getAnimationState(axis) === \"paused\" && ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n    });\n    const {\n      dragSnapToOrigin\n    } = this.getProps();\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart,\n      onStart,\n      onMove,\n      onSessionEnd,\n      resumeAnimation\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint(),\n      dragSnapToOrigin,\n      contextWindow: getContextWindow(this.visualElement)\n    });\n  }\n  stop(event, info) {\n    var _a;\n    (_a = this.removeWillChange) === null || _a === void 0 ? void 0 : _a.call(this);\n    const isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    const {\n      velocity\n    } = info;\n    this.startAnimation(velocity);\n    const {\n      onDragEnd\n    } = this.getProps();\n    if (onDragEnd) {\n      frame.postRender(() => onDragEnd(event, info));\n    }\n  }\n  cancel() {\n    this.isDragging = false;\n    const {\n      projection,\n      animationState\n    } = this.visualElement;\n    if (projection) {\n      projection.isAnimationBlocked = false;\n    }\n    this.panSession && this.panSession.end();\n    this.panSession = undefined;\n    const {\n      dragPropagation\n    } = this.getProps();\n    if (!dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n    animationState && animationState.setActive(\"whileDrag\", false);\n  }\n  updateAxis(axis, _point, offset) {\n    const {\n      drag\n    } = this.getProps();\n    // If we're not dragging this axis, do an early return.\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    const axisValue = this.getAxisMotionValue(axis);\n    let next = this.originPoint[axis] + offset[axis];\n    // Apply constraints\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n    axisValue.set(next);\n  }\n  resolveConstraints() {\n    var _a;\n    const {\n      dragConstraints,\n      dragElastic\n    } = this.getProps();\n    const layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n    const prevConstraints = this.constraints;\n    if (dragConstraints && isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\r\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\r\n     * from viewport-relative to component-relative.\r\n     */\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(axis => {\n        if (this.constraints !== false && this.getAxisMotionValue(axis)) {\n          this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n        }\n      });\n    }\n  }\n  resolveRefConstraints() {\n    const {\n      dragConstraints: constraints,\n      onMeasureDragConstraints\n    } = this.getProps();\n    if (!constraints || !isRefObject(constraints)) return false;\n    const constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    const {\n      projection\n    } = this.visualElement;\n    // TODO\n    if (!projection || !projection.layout) return false;\n    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n    /**\r\n     * If there's an onMeasureDragConstraints listener we call it and\r\n     * if different constraints are returned, set constraints to that\r\n     */\n    if (onMeasureDragConstraints) {\n      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToBox(userConstraints);\n      }\n    }\n    return measuredConstraints;\n  }\n  startAnimation(velocity) {\n    const {\n      drag,\n      dragMomentum,\n      dragElastic,\n      dragTransition,\n      dragSnapToOrigin,\n      onDragTransitionEnd\n    } = this.getProps();\n    const constraints = this.constraints || {};\n    const momentumAnimations = eachAxis(axis => {\n      if (!shouldDrag(axis, drag, this.currentDirection)) {\n        return;\n      }\n      let transition = constraints && constraints[axis] || {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\r\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\r\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\r\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\r\n       * using the value of `dragElastic`.\r\n       */\n      const bounceStiffness = dragElastic ? 200 : 1000000;\n      const bounceDamping = dragElastic ? 40 : 10000000;\n      const inertia = {\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness,\n        bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10,\n        ...dragTransition,\n        ...transition\n      };\n      // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n      return this.startAxisValueAnimation(axis, inertia);\n    });\n    // Run all animations and then resolve the new drag constraints.\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  }\n  startAxisValueAnimation(axis, transition) {\n    const axisValue = this.getAxisMotionValue(axis);\n    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false, addValueToWillChange(this.visualElement, axis)));\n  }\n  stopAnimation() {\n    eachAxis(axis => this.getAxisMotionValue(axis).stop());\n  }\n  pauseAnimation() {\n    eachAxis(axis => {\n      var _a;\n      return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();\n    });\n  }\n  getAnimationState(axis) {\n    var _a;\n    return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n  }\n  /**\r\n   * Drag works differently depending on which props are provided.\r\n   *\r\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\r\n   * - Otherwise, we apply the delta to the x/y motion values.\r\n   */\n  getAxisMotionValue(axis) {\n    const dragKey = `_drag${axis.toUpperCase()}`;\n    const props = this.visualElement.getProps();\n    const externalMotionValue = props[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n  }\n  snapToCursor(point) {\n    eachAxis(axis => {\n      const {\n        drag\n      } = this.getProps();\n      // If we're not dragging this axis, do an early return.\n      if (!shouldDrag(axis, drag, this.currentDirection)) return;\n      const {\n        projection\n      } = this.visualElement;\n      const axisValue = this.getAxisMotionValue(axis);\n      if (projection && projection.layout) {\n        const {\n          min,\n          max\n        } = projection.layout.layoutBox[axis];\n        axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n      }\n    });\n  }\n  /**\r\n   * When the viewport resizes we want to check if the measured constraints\r\n   * have changed and, if so, reposition the element within those new constraints\r\n   * relative to where it was before the resize.\r\n   */\n  scalePositionWithinConstraints() {\n    if (!this.visualElement.current) return;\n    const {\n      drag,\n      dragConstraints\n    } = this.getProps();\n    const {\n      projection\n    } = this.visualElement;\n    if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\r\n     * Stop current animations as there can be visual glitching if we try to do\r\n     * this mid-animation\r\n     */\n    this.stopAnimation();\n    /**\r\n     * Record the relative position of the dragged element relative to the\r\n     * constraints box and save as a progress value.\r\n     */\n    const boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(axis => {\n      const axisValue = this.getAxisMotionValue(axis);\n      if (axisValue && this.constraints !== false) {\n        const latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, this.constraints[axis]);\n      }\n    });\n    /**\r\n     * Update the layout of this element and resolve the latest drag constraints\r\n     */\n    const {\n      transformTemplate\n    } = this.visualElement.getProps();\n    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    projection.root && projection.root.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\r\n     * For each axis, calculate the current progress of the layout axis\r\n     * within the new constraints.\r\n     */\n    eachAxis(axis => {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\r\n       * Calculate a new transform based on the previous box progress\r\n       */\n      const axisValue = this.getAxisMotionValue(axis);\n      const {\n        min,\n        max\n      } = this.constraints[axis];\n      axisValue.set(mixNumber(min, max, boxProgress[axis]));\n    });\n  }\n  addListeners() {\n    if (!this.visualElement.current) return;\n    elementDragControls.set(this.visualElement, this);\n    const element = this.visualElement.current;\n    /**\r\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\r\n     */\n    const stopPointerListener = addPointerEvent(element, \"pointerdown\", event => {\n      const {\n        drag,\n        dragListener = true\n      } = this.getProps();\n      drag && dragListener && this.start(event);\n    });\n    const measureDragConstraints = () => {\n      const {\n        dragConstraints\n      } = this.getProps();\n      if (isRefObject(dragConstraints) && dragConstraints.current) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    };\n    const {\n      projection\n    } = this.visualElement;\n    const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n    if (projection && !projection.layout) {\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n    }\n    frame.read(measureDragConstraints);\n    /**\r\n     * Attach a window resize listener to scale the draggable target within its defined\r\n     * constraints as the window resizes.\r\n     */\n    const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n    /**\r\n     * If the element's layout changes, calculate the delta and apply that to\r\n     * the drag gesture's origin point.\r\n     */\n    const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", _ref => {\n      let {\n        delta,\n        hasLayoutChanged\n      } = _ref;\n      if (this.isDragging && hasLayoutChanged) {\n        eachAxis(axis => {\n          const motionValue = this.getAxisMotionValue(axis);\n          if (!motionValue) return;\n          this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n        this.visualElement.render();\n      }\n    });\n    return () => {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n      stopLayoutUpdateListener && stopLayoutUpdateListener();\n    };\n  }\n  getProps() {\n    const props = this.visualElement.getProps();\n    const {\n      drag = false,\n      dragDirectionLock = false,\n      dragPropagation = false,\n      dragConstraints = false,\n      dragElastic = defaultElastic,\n      dragMomentum = true\n    } = props;\n    return {\n      ...props,\n      drag,\n      dragDirectionLock,\n      dragPropagation,\n      dragConstraints,\n      dragElastic,\n      dragMomentum\n    };\n  }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\r\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\r\n * than the provided threshold, return `null`.\r\n *\r\n * @param offset - The x/y offset from origin.\r\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\r\n */\nfunction getCurrentDirection(offset) {\n  let lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let direction = null;\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n  return direction;\n}\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mixNumber","percent","animateMotionValue","getContextWindow","addValueToWillChange","frame","elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","arguments","length","undefined","presenceContext","isPresent","onSessionStart","event","dragSnapToOrigin","getProps","pauseAnimation","stopAnimation","point","onStart","info","_a","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","parseFloat","postRender","removeWillChange","call","animationState","setActive","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","resumeAnimation","getAnimationState","animation","play","panSession","transformPagePoint","getTransformPagePoint","contextWindow","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","measure","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","pause","state","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","read","stopResizeListener","window","stopLayoutUpdateListener","_ref","delta","hasLayoutChanged","motionValue","translate","direction","lockThreshold","Math","abs"],"sources":["D:/dev/code/java/aptMgrSpringReact/src/main/aptmgrfront/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from '../../utils/errors.mjs';\r\nimport { PanSession } from '../pan/PanSession.mjs';\r\nimport { getGlobalLock } from './utils/lock.mjs';\r\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\r\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\r\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\r\nimport { createBox } from '../../projection/geometry/models.mjs';\r\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\r\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\r\nimport { extractEventInfo } from '../../events/event-info.mjs';\r\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\r\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\r\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\r\nimport { mixNumber } from '../../utils/mix/number.mjs';\r\nimport { percent } from '../../value/types/numbers/units.mjs';\r\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\r\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\r\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\r\nimport { frame } from '../../frameloop/frame.mjs';\r\n\r\nconst elementDragControls = new WeakMap();\r\n/**\r\n *\r\n */\r\n// let latestPointerEvent: PointerEvent\r\nclass VisualElementDragControls {\r\n    constructor(visualElement) {\r\n        // This is a reference to the global drag gesture lock, ensuring only one component\r\n        // can \"capture\" the drag of one or both axes.\r\n        // TODO: Look into moving this into pansession?\r\n        this.openGlobalLock = null;\r\n        this.isDragging = false;\r\n        this.currentDirection = null;\r\n        this.originPoint = { x: 0, y: 0 };\r\n        /**\r\n         * The permitted boundaries of travel, in pixels.\r\n         */\r\n        this.constraints = false;\r\n        this.hasMutatedConstraints = false;\r\n        /**\r\n         * The per-axis resolved elastic values.\r\n         */\r\n        this.elastic = createBox();\r\n        this.visualElement = visualElement;\r\n    }\r\n    start(originEvent, { snapToCursor = false } = {}) {\r\n        /**\r\n         * Don't start dragging if this component is exiting\r\n         */\r\n        const { presenceContext } = this.visualElement;\r\n        if (presenceContext && presenceContext.isPresent === false)\r\n            return;\r\n        const onSessionStart = (event) => {\r\n            const { dragSnapToOrigin } = this.getProps();\r\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\r\n            // the component.\r\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\r\n            if (snapToCursor) {\r\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\r\n            }\r\n        };\r\n        const onStart = (event, info) => {\r\n            var _a;\r\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\r\n            const { drag, dragPropagation, onDragStart } = this.getProps();\r\n            if (drag && !dragPropagation) {\r\n                if (this.openGlobalLock)\r\n                    this.openGlobalLock();\r\n                this.openGlobalLock = getGlobalLock(drag);\r\n                // If we don 't have the lock, don't start dragging\r\n                if (!this.openGlobalLock)\r\n                    return;\r\n            }\r\n            this.isDragging = true;\r\n            this.currentDirection = null;\r\n            this.resolveConstraints();\r\n            if (this.visualElement.projection) {\r\n                this.visualElement.projection.isAnimationBlocked = true;\r\n                this.visualElement.projection.target = undefined;\r\n            }\r\n            /**\r\n             * Record gesture origin\r\n             */\r\n            eachAxis((axis) => {\r\n                let current = this.getAxisMotionValue(axis).get() || 0;\r\n                /**\r\n                 * If the MotionValue is a percentage value convert to px\r\n                 */\r\n                if (percent.test(current)) {\r\n                    const { projection } = this.visualElement;\r\n                    if (projection && projection.layout) {\r\n                        const measuredAxis = projection.layout.layoutBox[axis];\r\n                        if (measuredAxis) {\r\n                            const length = calcLength(measuredAxis);\r\n                            current = length * (parseFloat(current) / 100);\r\n                        }\r\n                    }\r\n                }\r\n                this.originPoint[axis] = current;\r\n            });\r\n            // Fire onDragStart event\r\n            if (onDragStart) {\r\n                frame.postRender(() => onDragStart(event, info));\r\n            }\r\n            (_a = this.removeWillChange) === null || _a === void 0 ? void 0 : _a.call(this);\r\n            this.removeWillChange = addValueToWillChange(this.visualElement, \"transform\");\r\n            const { animationState } = this.visualElement;\r\n            animationState && animationState.setActive(\"whileDrag\", true);\r\n        };\r\n        const onMove = (event, info) => {\r\n            // latestPointerEvent = event\r\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\r\n            // If we didn't successfully receive the gesture lock, early return.\r\n            if (!dragPropagation && !this.openGlobalLock)\r\n                return;\r\n            const { offset } = info;\r\n            // Attempt to detect drag direction if directionLock is true\r\n            if (dragDirectionLock && this.currentDirection === null) {\r\n                this.currentDirection = getCurrentDirection(offset);\r\n                // If we've successfully set a direction, notify listener\r\n                if (this.currentDirection !== null) {\r\n                    onDirectionLock && onDirectionLock(this.currentDirection);\r\n                }\r\n                return;\r\n            }\r\n            // Update each point with the latest position\r\n            this.updateAxis(\"x\", info.point, offset);\r\n            this.updateAxis(\"y\", info.point, offset);\r\n            /**\r\n             * Ideally we would leave the renderer to fire naturally at the end of\r\n             * this frame but if the element is about to change layout as the result\r\n             * of a re-render we want to ensure the browser can read the latest\r\n             * bounding box to ensure the pointer and element don't fall out of sync.\r\n             */\r\n            this.visualElement.render();\r\n            /**\r\n             * This must fire after the render call as it might trigger a state\r\n             * change which itself might trigger a layout update.\r\n             */\r\n            onDrag && onDrag(event, info);\r\n        };\r\n        const onSessionEnd = (event, info) => this.stop(event, info);\r\n        const resumeAnimation = () => eachAxis((axis) => {\r\n            var _a;\r\n            return this.getAnimationState(axis) === \"paused\" &&\r\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\r\n        });\r\n        const { dragSnapToOrigin } = this.getProps();\r\n        this.panSession = new PanSession(originEvent, {\r\n            onSessionStart,\r\n            onStart,\r\n            onMove,\r\n            onSessionEnd,\r\n            resumeAnimation,\r\n        }, {\r\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\r\n            dragSnapToOrigin,\r\n            contextWindow: getContextWindow(this.visualElement),\r\n        });\r\n    }\r\n    stop(event, info) {\r\n        var _a;\r\n        (_a = this.removeWillChange) === null || _a === void 0 ? void 0 : _a.call(this);\r\n        const isDragging = this.isDragging;\r\n        this.cancel();\r\n        if (!isDragging)\r\n            return;\r\n        const { velocity } = info;\r\n        this.startAnimation(velocity);\r\n        const { onDragEnd } = this.getProps();\r\n        if (onDragEnd) {\r\n            frame.postRender(() => onDragEnd(event, info));\r\n        }\r\n    }\r\n    cancel() {\r\n        this.isDragging = false;\r\n        const { projection, animationState } = this.visualElement;\r\n        if (projection) {\r\n            projection.isAnimationBlocked = false;\r\n        }\r\n        this.panSession && this.panSession.end();\r\n        this.panSession = undefined;\r\n        const { dragPropagation } = this.getProps();\r\n        if (!dragPropagation && this.openGlobalLock) {\r\n            this.openGlobalLock();\r\n            this.openGlobalLock = null;\r\n        }\r\n        animationState && animationState.setActive(\"whileDrag\", false);\r\n    }\r\n    updateAxis(axis, _point, offset) {\r\n        const { drag } = this.getProps();\r\n        // If we're not dragging this axis, do an early return.\r\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\r\n            return;\r\n        const axisValue = this.getAxisMotionValue(axis);\r\n        let next = this.originPoint[axis] + offset[axis];\r\n        // Apply constraints\r\n        if (this.constraints && this.constraints[axis]) {\r\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\r\n        }\r\n        axisValue.set(next);\r\n    }\r\n    resolveConstraints() {\r\n        var _a;\r\n        const { dragConstraints, dragElastic } = this.getProps();\r\n        const layout = this.visualElement.projection &&\r\n            !this.visualElement.projection.layout\r\n            ? this.visualElement.projection.measure(false)\r\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\r\n        const prevConstraints = this.constraints;\r\n        if (dragConstraints && isRefObject(dragConstraints)) {\r\n            if (!this.constraints) {\r\n                this.constraints = this.resolveRefConstraints();\r\n            }\r\n        }\r\n        else {\r\n            if (dragConstraints && layout) {\r\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\r\n            }\r\n            else {\r\n                this.constraints = false;\r\n            }\r\n        }\r\n        this.elastic = resolveDragElastic(dragElastic);\r\n        /**\r\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\r\n         * from viewport-relative to component-relative.\r\n         */\r\n        if (prevConstraints !== this.constraints &&\r\n            layout &&\r\n            this.constraints &&\r\n            !this.hasMutatedConstraints) {\r\n            eachAxis((axis) => {\r\n                if (this.constraints !== false &&\r\n                    this.getAxisMotionValue(axis)) {\r\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    resolveRefConstraints() {\r\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\r\n        if (!constraints || !isRefObject(constraints))\r\n            return false;\r\n        const constraintsElement = constraints.current;\r\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\r\n        const { projection } = this.visualElement;\r\n        // TODO\r\n        if (!projection || !projection.layout)\r\n            return false;\r\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\r\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\r\n        /**\r\n         * If there's an onMeasureDragConstraints listener we call it and\r\n         * if different constraints are returned, set constraints to that\r\n         */\r\n        if (onMeasureDragConstraints) {\r\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\r\n            this.hasMutatedConstraints = !!userConstraints;\r\n            if (userConstraints) {\r\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\r\n            }\r\n        }\r\n        return measuredConstraints;\r\n    }\r\n    startAnimation(velocity) {\r\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\r\n        const constraints = this.constraints || {};\r\n        const momentumAnimations = eachAxis((axis) => {\r\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\r\n                return;\r\n            }\r\n            let transition = (constraints && constraints[axis]) || {};\r\n            if (dragSnapToOrigin)\r\n                transition = { min: 0, max: 0 };\r\n            /**\r\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\r\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\r\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\r\n             * using the value of `dragElastic`.\r\n             */\r\n            const bounceStiffness = dragElastic ? 200 : 1000000;\r\n            const bounceDamping = dragElastic ? 40 : 10000000;\r\n            const inertia = {\r\n                type: \"inertia\",\r\n                velocity: dragMomentum ? velocity[axis] : 0,\r\n                bounceStiffness,\r\n                bounceDamping,\r\n                timeConstant: 750,\r\n                restDelta: 1,\r\n                restSpeed: 10,\r\n                ...dragTransition,\r\n                ...transition,\r\n            };\r\n            // If we're not animating on an externally-provided `MotionValue` we can use the\r\n            // component's animation controls which will handle interactions with whileHover (etc),\r\n            // otherwise we just have to animate the `MotionValue` itself.\r\n            return this.startAxisValueAnimation(axis, inertia);\r\n        });\r\n        // Run all animations and then resolve the new drag constraints.\r\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\r\n    }\r\n    startAxisValueAnimation(axis, transition) {\r\n        const axisValue = this.getAxisMotionValue(axis);\r\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false, addValueToWillChange(this.visualElement, axis)));\r\n    }\r\n    stopAnimation() {\r\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\r\n    }\r\n    pauseAnimation() {\r\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\r\n    }\r\n    getAnimationState(axis) {\r\n        var _a;\r\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\r\n    }\r\n    /**\r\n     * Drag works differently depending on which props are provided.\r\n     *\r\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\r\n     * - Otherwise, we apply the delta to the x/y motion values.\r\n     */\r\n    getAxisMotionValue(axis) {\r\n        const dragKey = `_drag${axis.toUpperCase()}`;\r\n        const props = this.visualElement.getProps();\r\n        const externalMotionValue = props[dragKey];\r\n        return externalMotionValue\r\n            ? externalMotionValue\r\n            : this.visualElement.getValue(axis, (props.initial\r\n                ? props.initial[axis]\r\n                : undefined) || 0);\r\n    }\r\n    snapToCursor(point) {\r\n        eachAxis((axis) => {\r\n            const { drag } = this.getProps();\r\n            // If we're not dragging this axis, do an early return.\r\n            if (!shouldDrag(axis, drag, this.currentDirection))\r\n                return;\r\n            const { projection } = this.visualElement;\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            if (projection && projection.layout) {\r\n                const { min, max } = projection.layout.layoutBox[axis];\r\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * When the viewport resizes we want to check if the measured constraints\r\n     * have changed and, if so, reposition the element within those new constraints\r\n     * relative to where it was before the resize.\r\n     */\r\n    scalePositionWithinConstraints() {\r\n        if (!this.visualElement.current)\r\n            return;\r\n        const { drag, dragConstraints } = this.getProps();\r\n        const { projection } = this.visualElement;\r\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\r\n            return;\r\n        /**\r\n         * Stop current animations as there can be visual glitching if we try to do\r\n         * this mid-animation\r\n         */\r\n        this.stopAnimation();\r\n        /**\r\n         * Record the relative position of the dragged element relative to the\r\n         * constraints box and save as a progress value.\r\n         */\r\n        const boxProgress = { x: 0, y: 0 };\r\n        eachAxis((axis) => {\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            if (axisValue && this.constraints !== false) {\r\n                const latest = axisValue.get();\r\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\r\n            }\r\n        });\r\n        /**\r\n         * Update the layout of this element and resolve the latest drag constraints\r\n         */\r\n        const { transformTemplate } = this.visualElement.getProps();\r\n        this.visualElement.current.style.transform = transformTemplate\r\n            ? transformTemplate({}, \"\")\r\n            : \"none\";\r\n        projection.root && projection.root.updateScroll();\r\n        projection.updateLayout();\r\n        this.resolveConstraints();\r\n        /**\r\n         * For each axis, calculate the current progress of the layout axis\r\n         * within the new constraints.\r\n         */\r\n        eachAxis((axis) => {\r\n            if (!shouldDrag(axis, drag, null))\r\n                return;\r\n            /**\r\n             * Calculate a new transform based on the previous box progress\r\n             */\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            const { min, max } = this.constraints[axis];\r\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\r\n        });\r\n    }\r\n    addListeners() {\r\n        if (!this.visualElement.current)\r\n            return;\r\n        elementDragControls.set(this.visualElement, this);\r\n        const element = this.visualElement.current;\r\n        /**\r\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\r\n         */\r\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\r\n            const { drag, dragListener = true } = this.getProps();\r\n            drag && dragListener && this.start(event);\r\n        });\r\n        const measureDragConstraints = () => {\r\n            const { dragConstraints } = this.getProps();\r\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\r\n                this.constraints = this.resolveRefConstraints();\r\n            }\r\n        };\r\n        const { projection } = this.visualElement;\r\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\r\n        if (projection && !projection.layout) {\r\n            projection.root && projection.root.updateScroll();\r\n            projection.updateLayout();\r\n        }\r\n        frame.read(measureDragConstraints);\r\n        /**\r\n         * Attach a window resize listener to scale the draggable target within its defined\r\n         * constraints as the window resizes.\r\n         */\r\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\r\n        /**\r\n         * If the element's layout changes, calculate the delta and apply that to\r\n         * the drag gesture's origin point.\r\n         */\r\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\r\n            if (this.isDragging && hasLayoutChanged) {\r\n                eachAxis((axis) => {\r\n                    const motionValue = this.getAxisMotionValue(axis);\r\n                    if (!motionValue)\r\n                        return;\r\n                    this.originPoint[axis] += delta[axis].translate;\r\n                    motionValue.set(motionValue.get() + delta[axis].translate);\r\n                });\r\n                this.visualElement.render();\r\n            }\r\n        }));\r\n        return () => {\r\n            stopResizeListener();\r\n            stopPointerListener();\r\n            stopMeasureLayoutListener();\r\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\r\n        };\r\n    }\r\n    getProps() {\r\n        const props = this.visualElement.getProps();\r\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\r\n        return {\r\n            ...props,\r\n            drag,\r\n            dragDirectionLock,\r\n            dragPropagation,\r\n            dragConstraints,\r\n            dragElastic,\r\n            dragMomentum,\r\n        };\r\n    }\r\n}\r\nfunction shouldDrag(direction, drag, currentDirection) {\r\n    return ((drag === true || drag === direction) &&\r\n        (currentDirection === null || currentDirection === direction));\r\n}\r\n/**\r\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\r\n * than the provided threshold, return `null`.\r\n *\r\n * @param offset - The x/y offset from origin.\r\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\r\n */\r\nfunction getCurrentDirection(offset, lockThreshold = 10) {\r\n    let direction = null;\r\n    if (Math.abs(offset.y) > lockThreshold) {\r\n        direction = \"y\";\r\n    }\r\n    else if (Math.abs(offset.x) > lockThreshold) {\r\n        direction = \"x\";\r\n    }\r\n    return direction;\r\n}\r\n\r\nexport { VisualElementDragControls, elementDragControls };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}