{"ast":null,"code":"// src/extend-theme.ts\nimport { theme, baseTheme, isChakraTheme } from \"@chakra-ui/theme\";\nimport mergeWith from \"lodash.mergewith\";\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction pipe(...fns) {\n  return v => fns.reduce((a, b) => b(a), v);\n}\nvar createExtendTheme = theme2 => {\n  return function extendTheme2(...extensions) {\n    let overrides = [...extensions];\n    let activeTheme = extensions[extensions.length - 1];\n    if (isChakraTheme(activeTheme) &&\n    // this ensures backward compatibility\n    // previously only `extendTheme(override, activeTheme?)` was allowed\n    overrides.length > 1) {\n      overrides = overrides.slice(0, overrides.length - 1);\n    } else {\n      activeTheme = theme2;\n    }\n    return pipe(...overrides.map(extension => prevTheme => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)))(activeTheme);\n  };\n};\nvar extendTheme = createExtendTheme(theme);\nvar extendBaseTheme = createExtendTheme(baseTheme);\nfunction mergeThemeOverride(...overrides) {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer);\n}\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return (...args) => {\n      const sourceValue = isFunction(source) ? source(...args) : source;\n      const overrideValue = isFunction(override) ? override(...args) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  }\n  return void 0;\n}\nexport { extendTheme, extendBaseTheme, mergeThemeOverride };","map":{"version":3,"names":["theme","baseTheme","isChakraTheme","mergeWith","isFunction","value","pipe","fns","v","reduce","a","b","createExtendTheme","theme2","extendTheme2","extensions","overrides","activeTheme","length","slice","map","extension","prevTheme","mergeThemeOverride","extendTheme","extendBaseTheme","mergeThemeCustomizer","source","override","key","object","Object","prototype","hasOwnProperty","call","args","sourceValue","overrideValue"],"sources":["D:/dev/code/java/aptMgrSpringReact/src/main/aptmgrfront/node_modules/@chakra-ui/theme-utils/dist/chunk-LIR5QAZY.mjs"],"sourcesContent":["// src/extend-theme.ts\r\nimport {\r\n  theme,\r\n  baseTheme,\r\n  isChakraTheme\r\n} from \"@chakra-ui/theme\";\r\nimport mergeWith from \"lodash.mergewith\";\r\nfunction isFunction(value) {\r\n  return typeof value === \"function\";\r\n}\r\nfunction pipe(...fns) {\r\n  return (v) => fns.reduce((a, b) => b(a), v);\r\n}\r\nvar createExtendTheme = (theme2) => {\r\n  return function extendTheme2(...extensions) {\r\n    let overrides = [...extensions];\r\n    let activeTheme = extensions[extensions.length - 1];\r\n    if (isChakraTheme(activeTheme) && // this ensures backward compatibility\r\n    // previously only `extendTheme(override, activeTheme?)` was allowed\r\n    overrides.length > 1) {\r\n      overrides = overrides.slice(0, overrides.length - 1);\r\n    } else {\r\n      activeTheme = theme2;\r\n    }\r\n    return pipe(\r\n      ...overrides.map(\r\n        (extension) => (prevTheme) => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)\r\n      )\r\n    )(activeTheme);\r\n  };\r\n};\r\nvar extendTheme = createExtendTheme(theme);\r\nvar extendBaseTheme = createExtendTheme(baseTheme);\r\nfunction mergeThemeOverride(...overrides) {\r\n  return mergeWith({}, ...overrides, mergeThemeCustomizer);\r\n}\r\nfunction mergeThemeCustomizer(source, override, key, object) {\r\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\r\n    return (...args) => {\r\n      const sourceValue = isFunction(source) ? source(...args) : source;\r\n      const overrideValue = isFunction(override) ? override(...args) : override;\r\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\r\n    };\r\n  }\r\n  return void 0;\r\n}\r\n\r\nexport {\r\n  extendTheme,\r\n  extendBaseTheme,\r\n  mergeThemeOverride\r\n};\r\n"],"mappings":"AAAA;AACA,SACEA,KAAK,EACLC,SAAS,EACTC,aAAa,QACR,kBAAkB;AACzB,OAAOC,SAAS,MAAM,kBAAkB;AACxC,SAASC,UAAUA,CAACC,KAAK,EAAE;EACzB,OAAO,OAAOA,KAAK,KAAK,UAAU;AACpC;AACA,SAASC,IAAIA,CAAC,GAAGC,GAAG,EAAE;EACpB,OAAQC,CAAC,IAAKD,GAAG,CAACE,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACD,CAAC,CAAC,EAAEF,CAAC,CAAC;AAC7C;AACA,IAAII,iBAAiB,GAAIC,MAAM,IAAK;EAClC,OAAO,SAASC,YAAYA,CAAC,GAAGC,UAAU,EAAE;IAC1C,IAAIC,SAAS,GAAG,CAAC,GAAGD,UAAU,CAAC;IAC/B,IAAIE,WAAW,GAAGF,UAAU,CAACA,UAAU,CAACG,MAAM,GAAG,CAAC,CAAC;IACnD,IAAIhB,aAAa,CAACe,WAAW,CAAC;IAAI;IAClC;IACAD,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;MACpBF,SAAS,GAAGA,SAAS,CAACG,KAAK,CAAC,CAAC,EAAEH,SAAS,CAACE,MAAM,GAAG,CAAC,CAAC;IACtD,CAAC,MAAM;MACLD,WAAW,GAAGJ,MAAM;IACtB;IACA,OAAOP,IAAI,CACT,GAAGU,SAAS,CAACI,GAAG,CACbC,SAAS,IAAMC,SAAS,IAAKlB,UAAU,CAACiB,SAAS,CAAC,GAAGA,SAAS,CAACC,SAAS,CAAC,GAAGC,kBAAkB,CAACD,SAAS,EAAED,SAAS,CACtH,CACF,CAAC,CAACJ,WAAW,CAAC;EAChB,CAAC;AACH,CAAC;AACD,IAAIO,WAAW,GAAGZ,iBAAiB,CAACZ,KAAK,CAAC;AAC1C,IAAIyB,eAAe,GAAGb,iBAAiB,CAACX,SAAS,CAAC;AAClD,SAASsB,kBAAkBA,CAAC,GAAGP,SAAS,EAAE;EACxC,OAAOb,SAAS,CAAC,CAAC,CAAC,EAAE,GAAGa,SAAS,EAAEU,oBAAoB,CAAC;AAC1D;AACA,SAASA,oBAAoBA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,MAAM,EAAE;EAC3D,IAAI,CAAC1B,UAAU,CAACuB,MAAM,CAAC,IAAIvB,UAAU,CAACwB,QAAQ,CAAC,KAAKG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,MAAM,EAAED,GAAG,CAAC,EAAE;IACrG,OAAO,CAAC,GAAGM,IAAI,KAAK;MAClB,MAAMC,WAAW,GAAGhC,UAAU,CAACuB,MAAM,CAAC,GAAGA,MAAM,CAAC,GAAGQ,IAAI,CAAC,GAAGR,MAAM;MACjE,MAAMU,aAAa,GAAGjC,UAAU,CAACwB,QAAQ,CAAC,GAAGA,QAAQ,CAAC,GAAGO,IAAI,CAAC,GAAGP,QAAQ;MACzE,OAAOzB,SAAS,CAAC,CAAC,CAAC,EAAEiC,WAAW,EAAEC,aAAa,EAAEX,oBAAoB,CAAC;IACxE,CAAC;EACH;EACA,OAAO,KAAK,CAAC;AACf;AAEA,SACEF,WAAW,EACXC,eAAe,EACfF,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}