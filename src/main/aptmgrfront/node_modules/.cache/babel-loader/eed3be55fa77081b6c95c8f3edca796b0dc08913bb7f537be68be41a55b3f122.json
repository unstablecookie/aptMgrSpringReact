{"ast":null,"code":"'use client';\n\n// src/use-popover.ts\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useFocusOnHide, useFocusOnShow } from \"@chakra-ui/react-use-focus-effect\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\nfunction usePopover() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props;\n  const {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = useDisclosure(props);\n  const anchorRef = useRef(null);\n  const triggerRef = useRef(null);\n  const popoverRef = useRef(null);\n  const isHoveringRef = useRef(false);\n  const hasBeenOpened = useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  const [hasHeader, setHasHeader] = useState(false);\n  const [hasBody, setHasBody] = useState(false);\n  const uuid = useId();\n  const uid = id != null ? id : uuid;\n  const [triggerId, popoverId, headerId, bodyId] = [\"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"].map(id2 => `${id2}-${uid}`);\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount\n  });\n  const animated = useAnimationState({\n    isOpen,\n    ref: popoverRef\n  });\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  const getPopoverProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const popoverProps = {\n      ...props2,\n      style: {\n        ...props2.style,\n        transformOrigin: popperCSSVars.transformOrigin.varRef,\n        [popperCSSVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      },\n      ref: mergeRefs(popoverRef, _ref),\n      children: shouldRenderChildren ? props2.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props2.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const targetIsPopover = contains(popoverRef.current, relatedTarget);\n        const targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        const isValidBlur = !targetIsPopover && !targetIsTrigger;\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : void 0,\n      \"aria-describedby\": hasBody ? bodyId : void 0\n    };\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, event => {\n        if (event.nativeEvent.relatedTarget === null) {\n          return;\n        }\n        isHoveringRef.current = false;\n        setTimeout(() => onClose(), closeDelay);\n      });\n    }\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay, arrowShadowColor, arrowSize]);\n  const getPopoverPositionerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps({\n      ...props2,\n      style: {\n        visibility: isOpen ? \"visible\" : \"hidden\",\n        ...props2.style\n      }\n    }, forwardedRef);\n  }, [isOpen, getPopperProps]);\n  const getAnchorProps = useCallback(function (props2) {\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      // If anchor is rendered, it is used as reference.\n      ref: mergeRefs(_ref, anchorRef, referenceRef)\n    };\n  }, [anchorRef, referenceRef]);\n  const openTimeout = useRef();\n  const closeTimeout = useRef();\n  const maybeReferenceRef = useCallback(node => {\n    if (anchorRef.current == null) {\n      referenceRef(node);\n    }\n  }, [referenceRef]);\n  const getTriggerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const triggerProps = {\n      ...props2,\n      ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    };\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);\n    }\n    if (trigger === TRIGGER.hover) {\n      triggerProps.onFocus = callAllHandlers(props2.onFocus, () => {\n        if (openTimeout.current === void 0) {\n          onOpen();\n        }\n      });\n      triggerProps.onBlur = callAllHandlers(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const isValidBlur = !contains(popoverRef.current, relatedTarget);\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      });\n      triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(() => onOpen(), openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = void 0;\n        }\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, maybeReferenceRef, onToggle, onOpen, closeOnBlur, onClose, openDelay, closeDelay]);\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  const getHeaderProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      id: headerId,\n      ref: mergeRefs(ref, node => {\n        setHasHeader(!!node);\n      })\n    };\n  }, [headerId]);\n  const getBodyProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      id: bodyId,\n      ref: mergeRefs(ref, node => {\n        setHasBody(!!node);\n      })\n    };\n  }, [bodyId]);\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps\n  };\n}\nfunction contains(parent, child) {\n  return parent === child || (parent == null ? void 0 : parent.contains(child));\n}\nfunction getRelatedTarget(event) {\n  var _a;\n  const activeEl = event.currentTarget.ownerDocument.activeElement;\n  return (_a = event.relatedTarget) != null ? _a : activeEl;\n}\nexport { usePopover };","map":{"version":3,"names":["useAnimationState","useFocusOnPointerDown","useFocusOnHide","useFocusOnShow","useDisclosure","popperCSSVars","usePopper","mergeRefs","callAllHandlers","lazyDisclosure","useCallback","useEffect","useId","useRef","useState","TRIGGER","click","hover","usePopover","props","arguments","length","undefined","closeOnBlur","closeOnEsc","initialFocusRef","id","returnFocusOnClose","autoFocus","arrowSize","arrowShadowColor","trigger","openDelay","closeDelay","isLazy","lazyBehavior","computePositionOnMount","popperProps","isOpen","onClose","onOpen","onToggle","anchorRef","triggerRef","popoverRef","isHoveringRef","hasBeenOpened","current","hasHeader","setHasHeader","hasBody","setHasBody","uuid","uid","triggerId","popoverId","headerId","bodyId","map","id2","referenceRef","getArrowProps","getPopperProps","getArrowInnerProps","forceUpdate","enabled","animated","ref","focusRef","visible","shouldFocus","shouldRenderChildren","wasSelected","mode","isSelected","present","getPopoverProps","props2","_ref","popoverProps","style","transformOrigin","varRef","var","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","getRelatedTarget","targetIsPopover","contains","targetIsTrigger","isValidBlur","onMouseEnter","onMouseLeave","nativeEvent","setTimeout","getPopoverPositionerProps","forwardedRef","visibility","getAnchorProps","openTimeout","closeTimeout","maybeReferenceRef","node","getTriggerProps","triggerProps","onClick","onFocus","window","clearTimeout","getHeaderProps","getBodyProps","onAnimationComplete","onComplete","parent","child","_a","activeEl","currentTarget","ownerDocument","activeElement"],"sources":["D:\\dev\\code\\java\\aptMgrSpringReact\\src\\main\\aptmgrfront\\node_modules\\@chakra-ui\\popover\\src\\use-popover.ts"],"sourcesContent":["import { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport {\n  useFocusOnHide,\n  useFocusOnShow,\n} from \"@chakra-ui/react-use-focus-effect\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { DOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends Omit<UsePopperProps, \"enabled\"> {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   *\n   * @default \"click\"\n   */\n  trigger?: keyof typeof TRIGGER\n  /**\n   * Delay in milliseconds before the popover opens after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  openDelay?: number\n  /**\n   * Delay in milliseconds before the popover closes after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `true`, the popover will be positioned when it mounts\n   * (even if it's not open)\n   *\n   * Note 🚨: We don't recommend using this in a popover/menu intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const anchorRef = useRef<HTMLElement>(null)\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const [triggerId, popoverId, headerId, bodyId] = [\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  ].map((id) => `${id}-${uid}`)\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount,\n  })\n\n  const animated = useAnimationState({ isOpen, ref: popoverRef })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: DOMAttributes = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n          [popperCSSVars.arrowSize.var]: arrowSize\n            ? `${arrowSize}px`\n            : undefined,\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(\n          props.onMouseLeave,\n          (event) => {\n            // https://stackoverflow.com/questions/46831247/select-triggers-mouseleave-event-on-parent-element-in-mozilla-firefox\n            if (event.nativeEvent.relatedTarget === null) {\n              return\n            }\n            isHoveringRef.current = false\n            setTimeout(() => onClose(), closeDelay)\n          },\n        )\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n      arrowShadowColor,\n      arrowSize,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [isOpen, getPopperProps],\n  )\n\n  const getAnchorProps: PropGetter = useCallback(\n    (props, _ref = null) => {\n      return {\n        ...props,\n        // If anchor is rendered, it is used as reference.\n        ref: mergeRefs(_ref, anchorRef, referenceRef),\n      }\n    },\n    [anchorRef, referenceRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const maybeReferenceRef = useCallback(\n    (node: Element) => {\n      // Don't override referenceRef in case the PopoverAnchor is rendered.\n      if (anchorRef.current == null) {\n        referenceRef(node)\n      }\n    },\n    [referenceRef],\n  )\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: DOMAttributes = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, () => {\n          // If openTimeout.current does not exist, the user is using keyboard focus (not mouse hover/click)\n          if (openTimeout.current === undefined) {\n            onOpen()\n          }\n        })\n        triggerProps.onBlur = callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const isValidBlur = !contains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        })\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(() => onOpen(), openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      maybeReferenceRef,\n      onToggle,\n      onOpen,\n      closeOnBlur,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement | null) {\n  return parent === child || parent?.contains(child)\n}\n\nfunction getRelatedTarget(event: React.FocusEvent) {\n  const activeEl = event.currentTarget.ownerDocument.activeElement\n  return (event.relatedTarget ?? activeEl) as HTMLElement | null\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}