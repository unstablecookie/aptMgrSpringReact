{"ast":null,"code":"// src/css-calc.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nvar toExpr = function (operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n  return operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\");\n};\nvar add = function () {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n  return `calc(${toExpr(\"+\", ...operands)})`;\n};\nvar subtract = function () {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n  return `calc(${toExpr(\"-\", ...operands)})`;\n};\nvar multiply = function () {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n  return `calc(${toExpr(\"*\", ...operands)})`;\n};\nvar divide = function () {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n  return `calc(${toExpr(\"/\", ...operands)})`;\n};\nvar negate = x => {\n  const value = toRef(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n  return multiply(value, -1);\n};\nvar calc = Object.assign(x => ({\n  add: function () {\n    for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      operands[_key6] = arguments[_key6];\n    }\n    return calc(add(x, ...operands));\n  },\n  subtract: function () {\n    for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      operands[_key7] = arguments[_key7];\n    }\n    return calc(subtract(x, ...operands));\n  },\n  multiply: function () {\n    for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      operands[_key8] = arguments[_key8];\n    }\n    return calc(multiply(x, ...operands));\n  },\n  divide: function () {\n    for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      operands[_key9] = arguments[_key9];\n    }\n    return calc(divide(x, ...operands));\n  },\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"names":["isObject","toRef","operand","reference","String","toExpr","operator","_len","arguments","length","operands","Array","_key","map","join","replace","add","_len2","_key2","subtract","_len3","_key3","multiply","_len4","_key4","divide","_len5","_key5","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","toString"],"sources":["D:\\dev\\code\\java\\aptMgrSpringReact\\src\\main\\aptmgrfront\\node_modules\\@chakra-ui\\theme-tools\\src\\css-calc.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}